kable() %>%
kable_styling(full_width = F) %>%
column_spec(1,bold=T,border_right = T)
lambda <- 3
movie_reg_avgs <- train_set %>%
group_by(movieId) %>%
summarize(reg_movie_effects = sum(rating - average_rating)/(n()+lambda), n_i = n())
data_frame("Original Movie Effect" = movie_avgs$movie_effect,
"Regularized Movie Effect" = movie_reg_avgs$reg_movie_effects,
n = movie_reg_avgs$n_i) %>%
ggplot(aes(`Original Movie Effect`, `Regularized Movie Effect`, size=sqrt(n))) +
geom_point(shape=1, alpha=0.5)
train_set %>% count(movieId) %>%
left_join(movie_reg_avgs, by ="movieId") %>%
left_join(movie_titles, by="movieId") %>%
arrange(desc(reg_movie_effects)) %>%
select(title, reg_movie_effects,n) %>%
rename("Title"=title,"Reg. Movie Effect"=reg_movie_effects,"Times Rated"=n) %>%
slice(1:10) %>%
kable() %>%
kable_styling(full_width = F) %>%
column_spec(1,bold=T,border_right = T)
predicted_ratings <- test_set %>%
left_join(movie_reg_avgs, by='movieId') %>%
mutate(pred = average_rating + reg_movie_effects) %>%
.$pred
reg_movie_effect_RMSE <- RMSE(predicted_ratings, test_set$rating)
rmse_results <- bind_rows(rmse_results,
data_frame(Method= "With Regularized Movie Effect",
RMSE=reg_movie_effect_RMSE))
kable(rmse_results,align=rep("c",3), caption = "Metrics calculated on test set only") %>%
kable_styling(full_width = F) %>%
column_spec(1,bold=T,border_right = T)
lambdas <- seq(0, 10, 0.25)
mu <- mean(train_set$rating)
just_the_sum <- train_set %>%
group_by(movieId) %>%
summarize(s = sum(rating - mu), n_i = n())
rmses <- sapply(lambdas, function(l){
predicted_ratings <- test_set %>%
left_join(just_the_sum, by='movieId') %>%
mutate(b_i = s/(n_i+l)) %>%
mutate(pred = mu + b_i) %>%
.$pred
return(RMSE(predicted_ratings, test_set$rating))
})
qplot(lambdas, rmses)
lambda_movie <- lambdas[which.min(rmses)]
lambda_movie
lambda <- lambda_movie
movie_reg_avgs <- train_set %>%
group_by(movieId) %>%
summarize(reg_movie_effects = sum(rating - average_rating)/(n()+lambda), n_i = n())
predicted_ratings <- test_set %>%
left_join(movie_reg_avgs, by='movieId') %>%
mutate(pred = average_rating + reg_movie_effects) %>%
.$pred
reg_movie_effect_RMSE <- RMSE(predicted_ratings, test_set$rating)
rmse_results <- bind_rows(rmse_results,
data_frame(Method= "With Optimized Regularized Movie Effect",
RMSE=reg_movie_effect_RMSE))
kable(rmse_results,align=rep("c",3), caption = "Metrics calculated on test set only") %>%
kable_styling(full_width = F) %>%
column_spec(1,bold=T,border_right = T)
train_set %>%
group_by(userId) %>%
summarize(b_u = mean(rating)) %>%
filter(n()>=100) %>%
ggplot(aes(b_u)) +
geom_histogram(bins = 30, color = "black")+
labs(title="Count of users by average rating", x="Average Rating by User", y="Count")
user_avgs <- train_set %>%
left_join(movie_reg_avgs, by='movieId') %>%
group_by(userId) %>%
summarize(user_effect = mean(rating - average_rating - reg_movie_effects))
predicted_ratings <- test_set %>%
left_join(movie_reg_avgs, by='movieId') %>%
left_join(user_avgs, by='userId') %>%
mutate(pred = average_rating + reg_movie_effects + user_effect) %>%
.$pred
movieanduser_effect_RMSE <- RMSE(predicted_ratings, test_set$rating)
rmse_results <- bind_rows(rmse_results,
data_frame(Method= "With Optimized Regularized Movie and User Effect",
RMSE=movieanduser_effect_RMSE))
kable(rmse_results,align=rep("c",3), caption = "Metrics calculated on test set only") %>%
kable_styling(full_width = F) %>%
column_spec(1,bold=T,border_right = T)
lambdas <- seq(0, 10, 0.25)
rmses <- sapply(lambdas, function(l){
mu <- mean(train_set$rating)
reg_b_i <- movie_reg_avgs %>%
group_by(movieId) %>%
summarize(reg_b_i = reg_movie_effects)
reg_b_u <- train_set %>%
left_join(reg_b_i, by="movieId") %>%
group_by(userId) %>%
summarize(reg_b_u = sum(rating - reg_b_i - mu)/(n()+l))
predicted_ratings <-
test_set %>%
left_join(reg_b_i, by = "movieId") %>%
left_join(reg_b_u, by = "userId") %>%
mutate(pred = mu + reg_b_i + reg_b_u) %>%
.$pred
return(RMSE(predicted_ratings, test_set$rating))
})
qplot(lambdas, rmses)
lambda_user <- lambdas[which.min(rmses)]
user_reg_avg <- train_set %>%
left_join(movie_reg_avgs, by="movieId") %>%
group_by(userId) %>%
summarize(reg_user_effects = sum(rating - reg_movie_effects - average_rating)/(n()+lambda_user))
predicted_ratings <- test_set %>%
left_join(movie_reg_avgs, by='movieId') %>%
left_join(user_reg_avg, by='userId') %>%
mutate(pred = average_rating + reg_movie_effects + reg_user_effects) %>%
.$pred
final_RMSE <- RMSE(predicted_ratings, test_set$rating)
rmse_results <- bind_rows(rmse_results,
data_frame(Method= "With Optimized Regularized Movie and Optimized Regularized User Effect",
RMSE=final_RMSE))
kable(rmse_results,align=rep("c",3), caption = "Metrics calculated on test set only") %>%
kable_styling(full_width = F) %>%
column_spec(1,bold=T,border_right = T)
rmse_results %>%
ggplot(aes(y = RMSE, x = reorder(Method,-RMSE)))+
geom_bar(stat = "identity")+
coord_flip()+
labs(x="",y="RMSE")
average_rating <- mean(edx$rating)
movie_reg_avgs <- edx %>%
group_by(movieId) %>%
summarize(reg_movie_effects = sum(rating - average_rating)/(n()+lambda_movie), n_i = n())
reg_b_i <- movie_reg_avgs %>%
group_by(movieId) %>%
summarize(reg_b_i = reg_movie_effects)
reg_b_u <- edx %>%
left_join(reg_b_i, by="movieId") %>%
group_by(userId) %>%
summarize(reg_b_u = sum(rating - reg_b_i - mu)/(n()+lambda_user))
predicted_ratings <-
validation %>%
left_join(reg_b_i, by = "movieId") %>%
left_join(reg_b_u, by = "userId") %>%
mutate(pred = mu + reg_b_i + reg_b_u) %>%
.$pred
final_RMSE <- RMSE(validation$rating, predicted_ratings)
rmse_results <- bind_rows(rmse_results,
data_frame(Method= "Best Model on Validation Set",
RMSE=final_RMSE))
kable(rmse_results,align=rep("c",3)) %>%
kable_styling(full_width = F) %>%
column_spec(1,bold=T,border_right = T)
end_time <- Sys.time()
run_time <- end_time - start_time
start_time <- Sys.time()
RMSE <- function(true_ratings, predicted_ratings){
sqrt(mean((true_ratings - predicted_ratings)^2))
}
if(!require(dslabs)) install.packages("dslabs", repos = "http://cran.us.r-project.org")
library(dslabs)
if(!require(tidyverse)) install.packages("tidyverse", repos = "http://cran.us.r-project.org")
library(tidyverse)
if(!require(knitr)) install.packages("knitr", repos = "http://cran.us.r-project.org")
library(knitr)
if(!require(kableExtra)) install.packages("kableExtra", repos = "http://cran.us.r-project.org")
library(kableExtra)
best_RMSE <- 0.8567
rmse_results <- data_frame(Method = "Netflix Winner", RMSE = best_RMSE)
kable(rmse_results, align = rep("c",2)) %>%
kable_styling(full_width = F) %>%
column_spec(1,bold=T,border_right = T)
if(!require(tidyverse)) install.packages("tidyverse", repos = "http://cran.us.r-project.org")
if(!require(caret)) install.packages("caret", repos = "http://cran.us.r-project.org")
# MovieLens 10M dataset:
# https://grouplens.org/datasets/movielens/10m/
# http://files.grouplens.org/datasets/movielens/ml-10m.zip
dl <- tempfile()
download.file("http://files.grouplens.org/datasets/movielens/ml-10m.zip", dl)
start_time <- Sys.time()
RMSE <- function(true_ratings, predicted_ratings){
sqrt(mean((true_ratings - predicted_ratings)^2))
}
if(!require(dslabs)) install.packages("dslabs", repos = "http://cran.us.r-project.org")
library(dslabs)
if(!require(tidyverse)) install.packages("tidyverse", repos = "http://cran.us.r-project.org")
library(tidyverse)
if(!require(knitr)) install.packages("knitr", repos = "http://cran.us.r-project.org")
library(knitr)
if(!require(kableExtra)) install.packages("kableExtra", repos = "http://cran.us.r-project.org")
library(kableExtra)
best_RMSE <- 0.8567
rmse_results <- data_frame(Method = "Netflix Winner", RMSE = best_RMSE)
kable(rmse_results, align = rep("c",2)) %>%
kable_styling(full_width = F) %>%
column_spec(1,bold=T,border_right = T)
if(!require(tidyverse)) install.packages("tidyverse", repos = "http://cran.us.r-project.org")
if(!require(caret)) install.packages("caret", repos = "http://cran.us.r-project.org")
# MovieLens 10M dataset:
# https://grouplens.org/datasets/movielens/10m/
# http://files.grouplens.org/datasets/movielens/ml-10m.zip
dl <- tempfile()
download.file("http://files.grouplens.org/datasets/movielens/ml-10m.zip", dl)
ratings <- read.table(text = gsub("::", "\t", readLines(unzip(dl, "ml-10M100K/ratings.dat"))),
col.names = c("userId", "movieId", "rating", "timestamp"))
movies <- str_split_fixed(readLines(unzip(dl, "ml-10M100K/movies.dat")), "\\::", 3)
colnames(movies) <- c("movieId", "title", "genres")
movies <- as.data.frame(movies) %>% mutate(movieId = as.numeric(levels(movieId))[movieId],
title = as.character(title),
genres = as.character(genres))
movielens <- left_join(ratings, movies, by = "movieId")
# Validation set will be 10% of MovieLens data
set.seed(1)
test_index <- createDataPartition(y = movielens$rating, times = 1, p = 0.1, list = FALSE)
edx <- movielens[-test_index,]
temp <- movielens[test_index,]
# Make sure userId and movieId in validation set are also in edx set
validation <- temp %>%
semi_join(edx, by = "movieId") %>%
semi_join(edx, by = "userId")
# Add rows removed from validation set back into edx set
removed <- anti_join(temp, validation)
edx <- rbind(edx, removed)
rm(dl, ratings, movies, test_index, temp, movielens, removed)
# Test set will be 15% of edX data
set.seed(1)
test_index <- createDataPartition(y = edx$rating, times = 1, p = 0.15, list = FALSE)
train_set <- edx[-test_index,]
temp_set <- edx[test_index,]
# Make sure userId and movieId in test set are also in train set
test_set <- temp_set %>%
semi_join(train_set, by = "movieId") %>%
semi_join(train_set, by = "userId")
# Add rows removed from test set set back into train set
removed_rows <- anti_join(temp_set, test_set)
train_set <- rbind(train_set, removed_rows)
rm(removed_rows, temp_set, test_index)
names(validation)
kable(validation[234:238,], align = rep("l",6)) %>%
kable_styling(full_width = F) %>%
column_spec(1,bold=T,border_right = T)
ratings_freqency <- edx %>%
group_by(rating) %>%
count() %>%
rename("Rating"=rating, "Frequency"=n) %>%
mutate("Of total"=paste(round(100*Frequency/nrow(edx),2),"%",sep=""))
kable(ratings_freqency, align = rep("c",3)) %>%
kable_styling(full_width = F) %>%
column_spec(1,bold=T,border_right = T)
rm(ratings_freqency)
half_vs_full_ratings <- edx %>%
mutate("Type"=ifelse(rating %in% c(1,2,3,4,5),"Full","Half")) %>%
group_by(Type) %>%
select(Type) %>%
count() %>%
rename("Ratings"=n) %>%
mutate("Of total"=paste(round(100*Ratings/nrow(edx),2),"%",sep=""))
kable(half_vs_full_ratings, align = rep("c",2)) %>%
kable_styling(full_width = F) %>%
column_spec(1,bold=T,border_right = T)
rm(half_vs_full_ratings)
length(unique(edx$movieId))
length(unique(edx$userId))
movies_by_number_of_rankings <- edx %>%
group_by(title) %>%
count() %>%
ungroup() %>%
arrange(-n) %>%
rename("Movie"=title, "Ratings"=n)
kable(head(movies_by_number_of_rankings), align = rep("c",2)) %>%
kable_styling(full_width = F) %>%
column_spec(1,bold=T,border_right = T)
rm(movies_by_number_of_rankings)
keep <- edx %>%
count(movieId) %>%
top_n(5, n) %>%
.$movieId
tab <- edx %>%
filter(movieId%in%keep) %>%
filter(userId %in% c(13:25)) %>%
select(userId, title, rating) %>%
mutate(title = str_remove(title, ", The"),
title = str_remove(title, ":.*")) %>%
spread(title, rating)
kable(tab) %>%
kable_styling(full_width = F) %>%
column_spec(1,bold=T,border_right = T)
rm(tab)
if(!require(rafalib)) install.packages("rafalib", repos = "http://cran.us.r-project.org")
library(rafalib)
users <- sample(unique(edx$userId), 100)
rafalib::mypar()
edx %>% filter(userId %in% users) %>%
select(userId, movieId, rating) %>%
mutate(rating = 1) %>%
spread(movieId, rating) %>% select(sample(ncol(.), 100)) %>%
as.matrix() %>% t(.) %>%
image(1:100, 1:100,. , xlab="Movies", ylab="Users") %>%
abline(h=0:100+0.5, v=0:100+0.5, col = "lightgrey")
edx %>%
count(movieId) %>%
arrange(-n) %>%
ggplot(aes(n)) +
geom_histogram(bins = 30, color = "black") +
labs(title="Movies by rating count", y="Movies", x="Number of ratings")
edx %>%
count(userId) %>%
arrange(-n) %>%
ggplot(aes(n)) +
geom_histogram(bins = 30, color = "black") +
scale_x_log10()+
labs(title="Users by rating count", y="Users", x="Number of ratings")
Avg_by_user <- edx %>%
group_by(userId) %>%
summarize(avg=mean(rating))
Avg_by_user %>% ggplot(aes(avg)) +
geom_histogram(bins = 30, color = "black")+
labs(title="Distribution of average score by users", x="Average score", y="Number of users")
average_rating <- mean(train_set$rating)
naiveRMSE <- RMSE(test_set$rating, average_rating)
rmse_results <- bind_rows(rmse_results,
data_frame(Method = "Just the average", RMSE = naiveRMSE))
kable(rmse_results,align=rep("c",3)) %>%
kable_styling(full_width = F) %>%
column_spec(1,bold=T,border_right = T)
movie_avgs <- train_set %>%
group_by(movieId) %>%
summarize(movie_effect = mean(rating - average_rating))
movie_avgs %>% qplot(movie_effect, geom ="histogram", bins = 10, data = ., color = I("black"))
predicted_ratings <- average_rating + test_set %>%
left_join(movie_avgs, by='movieId') %>%
.$movie_effect
movie_effect_RMSE <- RMSE(predicted_ratings, test_set$rating)
rmse_results <- bind_rows(rmse_results,
data_frame(Method= "With Movie Effect",
RMSE=movie_effect_RMSE))
kable(rmse_results,align=rep("c",3), caption = "Metrics calculated on test set only") %>%
kable_styling(full_width = F) %>%
column_spec(1,bold=T,border_right = T)
movie_titles <- edx %>%
select(movieId, title) %>%
distinct()
train_set %>% count(movieId) %>%
left_join(movie_avgs, by ="movieId") %>%
left_join(movie_titles, by="movieId") %>%
arrange(desc(movie_effect)) %>%
select(title, movie_effect,n) %>%
rename("Title"=title,"Movie Effect"=movie_effect,"Times Rated"=n) %>%
slice(1:10) %>%
kable() %>%
kable_styling(full_width = F) %>%
column_spec(1,bold=T,border_right = T)
train_set %>% count(movieId) %>%
left_join(movie_avgs, by ="movieId") %>%
left_join(movie_titles, by="movieId") %>%
arrange(movie_effect) %>%
select(title, movie_effect,n) %>%
rename("Title"=title,"Movie Effect"=movie_effect,"Times Rated"=n) %>%
slice(1:10) %>%
kable() %>%
kable_styling(full_width = F) %>%
column_spec(1,bold=T,border_right = T)
lambda <- 3
movie_reg_avgs <- train_set %>%
group_by(movieId) %>%
summarize(reg_movie_effects = sum(rating - average_rating)/(n()+lambda), n_i = n())
data_frame("Original Movie Effect" = movie_avgs$movie_effect,
"Regularized Movie Effect" = movie_reg_avgs$reg_movie_effects,
n = movie_reg_avgs$n_i) %>%
ggplot(aes(`Original Movie Effect`, `Regularized Movie Effect`, size=sqrt(n))) +
geom_point(shape=1, alpha=0.5)
train_set %>% count(movieId) %>%
left_join(movie_reg_avgs, by ="movieId") %>%
left_join(movie_titles, by="movieId") %>%
arrange(desc(reg_movie_effects)) %>%
select(title, reg_movie_effects,n) %>%
rename("Title"=title,"Reg. Movie Effect"=reg_movie_effects,"Times Rated"=n) %>%
slice(1:10) %>%
kable() %>%
kable_styling(full_width = F) %>%
column_spec(1,bold=T,border_right = T)
predicted_ratings <- test_set %>%
left_join(movie_reg_avgs, by='movieId') %>%
mutate(pred = average_rating + reg_movie_effects) %>%
.$pred
reg_movie_effect_RMSE <- RMSE(predicted_ratings, test_set$rating)
rmse_results <- bind_rows(rmse_results,
data_frame(Method= "With Regularized Movie Effect",
RMSE=reg_movie_effect_RMSE))
kable(rmse_results,align=rep("c",3), caption = "Metrics calculated on test set only") %>%
kable_styling(full_width = F) %>%
column_spec(1,bold=T,border_right = T)
lambdas <- seq(0, 10, 0.25)
mu <- mean(train_set$rating)
just_the_sum <- train_set %>%
group_by(movieId) %>%
summarize(s = sum(rating - mu), n_i = n())
rmses <- sapply(lambdas, function(l){
predicted_ratings <- test_set %>%
left_join(just_the_sum, by='movieId') %>%
mutate(b_i = s/(n_i+l)) %>%
mutate(pred = mu + b_i) %>%
.$pred
return(RMSE(predicted_ratings, test_set$rating))
})
qplot(lambdas, rmses)
lambda_movie <- lambdas[which.min(rmses)]
lambda_movie
lambda <- lambda_movie
movie_reg_avgs <- train_set %>%
group_by(movieId) %>%
summarize(reg_movie_effects = sum(rating - average_rating)/(n()+lambda), n_i = n())
predicted_ratings <- test_set %>%
left_join(movie_reg_avgs, by='movieId') %>%
mutate(pred = average_rating + reg_movie_effects) %>%
.$pred
reg_movie_effect_RMSE <- RMSE(predicted_ratings, test_set$rating)
rmse_results <- bind_rows(rmse_results,
data_frame(Method= "With Optimized Regularized Movie Effect",
RMSE=reg_movie_effect_RMSE))
kable(rmse_results,align=rep("c",3), caption = "Metrics calculated on test set only") %>%
kable_styling(full_width = F) %>%
column_spec(1,bold=T,border_right = T)
train_set %>%
group_by(userId) %>%
summarize(b_u = mean(rating)) %>%
filter(n()>=100) %>%
ggplot(aes(b_u)) +
geom_histogram(bins = 30, color = "black")+
labs(title="Count of users by average rating", x="Average Rating by User", y="Count")
user_avgs <- train_set %>%
left_join(movie_reg_avgs, by='movieId') %>%
group_by(userId) %>%
summarize(user_effect = mean(rating - average_rating - reg_movie_effects))
predicted_ratings <- test_set %>%
left_join(movie_reg_avgs, by='movieId') %>%
left_join(user_avgs, by='userId') %>%
mutate(pred = average_rating + reg_movie_effects + user_effect) %>%
.$pred
movieanduser_effect_RMSE <- RMSE(predicted_ratings, test_set$rating)
rmse_results <- bind_rows(rmse_results,
data_frame(Method= "With Optimized Regularized Movie and User Effect",
RMSE=movieanduser_effect_RMSE))
kable(rmse_results,align=rep("c",3), caption = "Metrics calculated on test set only") %>%
kable_styling(full_width = F) %>%
column_spec(1,bold=T,border_right = T)
lambdas <- seq(0, 10, 0.25)
rmses <- sapply(lambdas, function(l){
mu <- mean(train_set$rating)
reg_b_i <- movie_reg_avgs %>%
group_by(movieId) %>%
summarize(reg_b_i = reg_movie_effects)
reg_b_u <- train_set %>%
left_join(reg_b_i, by="movieId") %>%
group_by(userId) %>%
summarize(reg_b_u = sum(rating - reg_b_i - mu)/(n()+l))
predicted_ratings <-
test_set %>%
left_join(reg_b_i, by = "movieId") %>%
left_join(reg_b_u, by = "userId") %>%
mutate(pred = mu + reg_b_i + reg_b_u) %>%
.$pred
return(RMSE(predicted_ratings, test_set$rating))
})
qplot(lambdas, rmses)
lambda_user <- lambdas[which.min(rmses)]
user_reg_avg <- train_set %>%
left_join(movie_reg_avgs, by="movieId") %>%
group_by(userId) %>%
summarize(reg_user_effects = sum(rating - reg_movie_effects - average_rating)/(n()+lambda_user))
predicted_ratings <- test_set %>%
left_join(movie_reg_avgs, by='movieId') %>%
left_join(user_reg_avg, by='userId') %>%
mutate(pred = average_rating + reg_movie_effects + reg_user_effects) %>%
.$pred
final_RMSE <- RMSE(predicted_ratings, test_set$rating)
rmse_results <- bind_rows(rmse_results,
data_frame(Method= "With Optimized Regularized Movie and Optimized Regularized User Effect",
RMSE=final_RMSE))
kable(rmse_results,align=rep("c",3), caption = "Metrics calculated on test set only") %>%
kable_styling(full_width = F) %>%
column_spec(1,bold=T,border_right = T)
rmse_results %>%
ggplot(aes(y = RMSE, x = reorder(Method,-RMSE)))+
geom_bar(stat = "identity")+
coord_flip()+
labs(x="",y="RMSE")
average_rating <- mean(edx$rating)
movie_reg_avgs <- edx %>%
group_by(movieId) %>%
summarize(reg_movie_effects = sum(rating - average_rating)/(n()+lambda_movie), n_i = n())
reg_b_i <- movie_reg_avgs %>%
group_by(movieId) %>%
summarize(reg_b_i = reg_movie_effects)
reg_b_u <- edx %>%
left_join(reg_b_i, by="movieId") %>%
group_by(userId) %>%
summarize(reg_b_u = sum(rating - reg_b_i - mu)/(n()+lambda_user))
predicted_ratings <-
validation %>%
left_join(reg_b_i, by = "movieId") %>%
left_join(reg_b_u, by = "userId") %>%
mutate(pred = mu + reg_b_i + reg_b_u) %>%
.$pred
final_RMSE <- RMSE(validation$rating, predicted_ratings)
rmse_results <- bind_rows(rmse_results,
data_frame(Method= "Best Model on Validation Set",
RMSE=final_RMSE))
kable(rmse_results,align=rep("c",3)) %>%
kable_styling(full_width = F) %>%
column_spec(1,bold=T,border_right = T)
end_time <- Sys.time()
run_time <- end_time - start_time
